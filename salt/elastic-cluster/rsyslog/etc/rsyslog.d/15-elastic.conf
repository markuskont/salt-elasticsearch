{%- set logstash_ip = '127.0.0.1' -%}
{%- set logstash_port = '10514' -%}
{%- set es_queue_size = '1000' -%}
{%- set es_bulk_size = '300' -%}

#load needed modules
module(load="mmjsonparse")
module(load="omelasticsearch")

#try to parse a structured log
action(type="mmjsonparse")

# Suricata index
# Use suricata timestamp from JSON
# Independant of syslog, thus should be usable for offline PCAP loading (suricata -r)
template(name="suricata-index" type="list") {
  constant(value="suricata-")
  property(name="$!timestamp" position.from="1" position.to="4")
  constant(value=".")
  property(name="$!timestamp" position.from="6" position.to="7")
}
template(name="cee-index" type="list") {
  constant(value="cee-")
  property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
}
template(name="syslog-index" type="list") {
  constant(value="syslog-")
  property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
  constant(value=".")
  property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
}

# Add syslog timestamp and hostname to JSON
template(name="customTemplate" type="list") {
  constant(value="{\"@timestamp\":\"")                      property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"hostname\":\"")                      property(name="hostname" format="json")
  constant(value="\",")                                     property(name="$!all-json" position.from="2")
}
template(name="ceeTemplate" type="list") {
  constant(value="{\"@timestamp\":\"")                      property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"hostname\":\"")                      property(name="hostname" format="json")
  constant(value="\",\"program\":\"")                       property(name="programname" format="json")
  constant(value="\",")                                     property(name="$!all-json" position.from="3")
}
template(name="syslog"
         type="list"
         option.json="on") {
           constant(value="{")
             constant(value="\"@timestamp\":\"")            property(name="timereported" dateFormat="rfc3339")
             constant(value="\",\"message\":\"")            property(name="msg")
             constant(value="\",\"host\":\"")               property(name="hostname")
             constant(value="\",\"severity\":\"")           property(name="syslogseverity-text")
             constant(value="\",\"facility\":\"")           property(name="syslogfacility-text")
             constant(value="\",\"syslogtag\":\"")          property(name="syslogtag")
             constant(value="\",\"program\":\"")            property(name="programname")
           constant(value="\"}")
         }

main_queue(
  # buffer up to 1M messages in memory
  queue.size="1000000"
  # these threads process messages and send them to Elasticsearch
  queue.workerThreads="4"
  # rsyslog processes messages in batches to avoid queue contention
  # this will also be the Elasticsearch bulk size
  queue.dequeueBatchSize="{{es_bulk_size}}"
)

# Account for both BSD and IETF syslog formats
if $msg startswith '@cee: ' or $msg startswith ' @cee: ' then {
  if $syslogtag contains 'suricata' then {
    if $parsesuccess == "OK" then action(
      type="omelasticsearch"
      template="customTemplate"
      searchIndex="suricata-index"
      dynSearchIndex="on"
      bulkmode="on"
      action.resumeretrycount="-1"
    )
  } else {
    # write the JSON message to the local ES node
    if $parsesuccess == "OK" then action(
      type="omelasticsearch"
      template="ceeTemplate"
      searchIndex="cee-index"
      dynSearchIndex="on"
      bulkmode="on"
      action.resumeretrycount="-1"
    )
  }
} else {
  action(
    type="omelasticsearch"
    template="syslog"
    searchIndex="syslog-index"
    dynSearchIndex="on"
    bulkmode="on"
    action.resumeretrycount="-1"
  )
}
#stop
